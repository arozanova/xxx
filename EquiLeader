#include <stack>

// you can write to stdout for debugging purposes, e.g.
// cout << "this is a debug message" << endl;

int getLeader(const vector<int> &A,  int& leaders){
    stack<int> leader; 
    
  //  cout << "in getLeader " << endl;

    for (size_t i = 0; i != A.size(); ++i) {
        if (leader.size() == 0){
            leader.push(A[i]);
        }
        else if (A[i] == leader.top()) {
            leader.push(A[i]);
        }
        else {
            leader.pop();
        } 
    }
 //  cout << "size " << size<< endl;
    size_t n =0;
     for (size_t i = 0; i != A.size(); ++i) {
        if (A[i] == leader.top()) {
            ++n;
        }
    }
    if (n <  0.5*A.size()+1) {
        return   -1;
    }
    leaders = n;
        
    return  leader.top();
}

int solution(vector<int> &A) {
    // write your code in C++14 (g++ 6.2.0)
    int ret = 0;
    if (A.size() == 1 )
        return ret;
    
    int leaders = 0;
    int theLeader = getLeader(A, leaders);
  //  cout << "the leader "<< theLeader << endl;
    if (theLeader == -1) {
        return ret;
    }
 
    
    for (size_t i = 0, leadersToTheLeft=0; i < A.size(); ++i) {
        if (A[i]==theLeader) {
            leadersToTheLeft++;
        }
        double left = double(leadersToTheLeft)/double(i+1);
        double right = double(leaders-leadersToTheLeft)/double(A.size()-i-1);
        
     //   cout << "left " <<  left << " right " << right ;
        if (left > 0.5 && right > 0.5 ) {
            ret++;
    //        cout << " ret "<< ret << endl;
        }
    }
    
    
    return ret;
}
